import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.*;
import java.io.*;
import java.net.*;
import java.lang.*;
//import javax.mail.Authenticator;
//import javax.mail.Message;
//import javax.mail.PasswordAuthentication;
//import javax.mail.Session;
//import javax.mail.Transport;
//import javax.mail.internet.InternetAddress;
//import javax.mail.internet.MimeMessage;

public class CreateVotingSoftware {

	// socket for connection to SISServer
	private static Socket universal;
	private static int port = 53217;
	// message writer
	private static MsgEncoder encoder;
	// message reader
	private static MsgDecoder decoder;

	// scope of this component
	private static final String SCOPE = "SIS.Scope1";
	// name of this component
	private static final String NAME = "VotingSoftware";
	// messages types that can be handled by this component
	private static final List<String> TYPES = new ArrayList<String>(
			Arrays.asList(new String[] { "Acknowledge Request Report", "Acknowledge Vote", "Acknowledge MSG",
		 															 "Activate Component", "Cast Vote", "Connect To Server", "Create ABB VotingSoftware Component",
																	  "DeActivate Component", "Init Tally Table", "Kill Component", "Request Report"}));

	// summary for all incoming / outgoing messages
	private static final String incomingMessages = "IN\tCreate ABB VotingSoftware Component | Activate Component | Cast Vote" +
	 																							 "\nDeActivate Component | Init Tally Tablet | Kill Component | Request Report";

	private static final String outgoingMessages = "OUT\t Acknowledge Request Report|Acknowledge Vote|Acknowledge MSG";

	// shared by all kinds of emergencies that can be generated by this component
	private static KeyValueList emergency = new KeyValueList();

	static ArrayList<Double> tempRecord = new ArrayList<Double>();

	/*
	 * Main program
	 */
	public static void main(String[] args) {
		while (true) {
			try {
				// try to establish a connection to SISServer
				universal = connect();

				// bind the message reader to inputstream of the socket
				decoder = new MsgDecoder(universal.getInputStream());
				// bind the message writer to outputstream of the socket
				encoder = new MsgEncoder(universal.getOutputStream());

				/*
				 * construct a Connect message to establish the connection
				 */
				KeyValueList conn = new KeyValueList();
				conn.putPair("Scope", SCOPE);
				conn.putPair("MessageType", "Connect");
				conn.putPair("IncomingMessages", incomingMessages);
                conn.putPair("OutgoingMessages", outgoingMessages);
				conn.putPair("Role", "Controller");
				conn.putPair("Name", NAME);
				encoder.sendMsg(conn);

				initRecord();

				// KeyValueList for inward messages, see KeyValueList for
				// details
				KeyValueList kvList;

				while (true) {
					// attempt to read and decode a message, see MsgDecoder for
					// details
					kvList = decoder.getMsg();

					// process that message
					ProcessMsg(kvList);
				}

			} catch (Exception e) {
				// if anything goes wrong, try to re-establish the connection
				try {
					// wait for 1 second to retry
					Thread.sleep(1000);
				} catch (InterruptedException e2) {
				}
				System.out.println("Try to reconnect");
				try {
					universal = connect();
				} catch (IOException e1) {
				}
			}
		}
	}

	/*
	 * used for connect(reconnect) to SISServer
	 */
	static Socket connect() throws IOException {
		Socket socket = new Socket("127.0.0.1", port);
		return socket;
	}

	private static void initRecord() {

		emergency.putPair("Scope", SCOPE);
		emergency.putPair("MessageType", "Init Component");
		emergency.putPair("Sender", NAME);

		// Receiver may be different for each message, so it doesn't make sense
		// to set here
		// alert.putPair("Receiver", "RECEIVER");
	}

	/*
	 * process a certain message, execute corresponding actions
	 */
	static void ProcessMsg(KeyValueList kvList) throws IOException {

		String scope = kvList.getValue("Scope");

		String broadcast = kvList.getValue("Broadcast");
		String direction = kvList.getValue("Direction");

		if(broadcast!=null&&broadcast.equals("True")){

			if(direction!=null&&direction.equals("Up")){
				if(!scope.startsWith(SCOPE)){
					return;
				}
			}else if(direction!=null&&direction.equals("Down")){
				if(!SCOPE.startsWith(scope)){
					return;
				}
			}
		}else{
			if(!SCOPE.equals(scope)){
				return;
			}
		}

		String messageType = kvList.getValue("MessageType");
		if(!TYPES.contains(messageType)){
			return;
		}

		String sender = kvList.getValue("Sender");

		String receiver = kvList.getValue("Receiver");

		String purpose = kvList.getValue("Purpose");


		switch (messageType) {

		case "Acknowledge Request Report":
				System.out.println("Ack Request Report");
				break;

		case "Connect To Server":
			System.out.println("Connect to SISServer successful.");
			break;

		case "Cast Vote":
			System.out.println("Cast Vote was successful");
			break;

  	case "Acknowledge Vote":
				System.out.println("Cast Vote was acknowledged");
				break;

		case "Acknowledge MSG":
				System.out.println("MSG Acknowledged");
				break;

		case "Activate Component":
				System.out.println("Component Activated");
				break;

		case "Create ABB VotingSoftware Component":
			  System.out.println("Component Created");
       	break;

		case "DeActivate Component":
				System.out.println("Component Deactivated");
				break;

		case "Init Tally Table":
				System.out.println("Request Report");
				break;

		case "Kill Component":
			System.exit(0);
			break;
		} // end processMsg
	} // end process message class
} // end VotingSoftware class
